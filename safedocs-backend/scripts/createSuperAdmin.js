const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('../src/models/User');
require('dotenv').config();

// Funci√≥n para crear super administrador
async function createSuperAdmin() {
  try {
    // Conectar a MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/safedocs');
    console.log('‚úÖ Conectado a MongoDB');

    // Verificar si ya existe un super admin
    const existingSuperAdmin = await User.findOne({ role: 'super_admin' });
    if (existingSuperAdmin) {
      console.log('‚ö†Ô∏è Ya existe un super administrador en el sistema');
      console.log(`Email: ${existingSuperAdmin.email}`);
      return;
    }

    // Datos del super administrador
    const superAdminData = {
      name: 'Super Administrador',
      email: 'admin@safedocs.unab.cl',
      password: 'Admin123!',
      career: 'Administraci√≥n del Sistema',
      role: 'super_admin'
    };

    // Crear el super administrador
    const superAdmin = new User(superAdminData);
    await superAdmin.save();

    console.log('‚úÖ Super administrador creado exitosamente');
    console.log(`Nombre: ${superAdmin.name}`);
    console.log(`Email: ${superAdmin.email}`);
    console.log(`Rol: ${superAdmin.role}`);
    console.log(`Permisos: ${superAdmin.permissions.join(', ')}`);
    console.log('\nüîê Credenciales de acceso:');
    console.log(`Email: ${superAdmin.email}`);
    console.log(`Contrase√±a: ${superAdminData.password}`);
    console.log('\n‚ö†Ô∏è IMPORTANTE: Cambia la contrase√±a despu√©s del primer inicio de sesi√≥n');

  } catch (error) {
    console.error('‚ùå Error creando super administrador:', error);
  } finally {
    // Cerrar conexi√≥n
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n a MongoDB cerrada');
  }
}

// Ejecutar script
if (require.main === module) {
  createSuperAdmin();
}

module.exports = createSuperAdmin;
